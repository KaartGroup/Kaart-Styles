meta {
  title: "QC Styles For Mexico Team";
  description: "Highlights features that were created/modified by users";
  watch-modified: true;
  version: "1.6";
  icon: "http://uncrate.com/p/2016/02/smart-kart.jpg";
  min-josm-version: "15289"; /* This style uses groups for settings */
}

/* Notes
1.0 Added styles -- provided by Jenn -- and users -- Ian -- 3/11/2019
1.1 Configured styles -- Louis -- 3/13/2019
1.2 Configured style colors and highlighting -- Ian -- 3/15/2019
1.3 Simplified user lines -- Louis -- 3/18/2019
1.4 Adjusted user, style lines and appearances -- 3/20/2019
1.5 Alphabetized users, added new users, added tips, simplified node highlight & node modified overlays -- Louis,Ian,AndrewP -- 5/15/2019
1.6 Updated to include both Sanitas and Nokhu teams -- Sarah R. -- 3/05/2020

Tips:

A setting should be created for each separate user:

setting::user_aaron {
  type: boolean;
  label: tr("Turn User Aaron On/Off");
  default: false;
}

-- after :: comes your setting "class" which can be named as you will. Our example show user_aaron
-- Type: boolean; should always exist
-- label: tr("Anything you want to put here") -> This is what shows up under setting in JOSM
-- Default: false -> the setting will remain disabled on launch until a user enables it

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

at which point, it becomes necessary to create a selector statement for your user:

*[osm_user_name() == "vespax"][setting("user_aaron")] {
  set .aaron;
}

-- * denotes what you are selecting, in this case, every element type in OSM
-- [osm_user_name() == "vespax"] -> this is necessary and should be constructed as such.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to construct time stamps, you can use the following:

String: "[eval(JOSM_search("timestamp:2016-02-20/"))]" can be modified in several ways
"timestamp:2016-02-20/" -- Shows all edits edited after date
"timestamp:2016-02-20/2016-02-22" -- Shows all edits after 02-20 but before 02-22
"timestamp:2016-02/ Day and Month can be removed to widen the range of edits shown, example here shows all edits starting in FEB2016.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

So, a timestamped search would look like this:

*[osm_user_name() == "IndianaJones737"))][eval(JOSM_search("timestamp:2016-03-14/2016-03-15"] {
  casing-width: 10;
  casing-color: green;
  casing-opacity: 0.2;
}

-- set .aaron; -> this is setting the class for this statement. This allows us to call it out later on. Classes
can be set like that or as so -> set aaron;

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

way.aaron, & node.aaron,

-- This shows that we are looking for all ways/nodes which meet the "aaron" class. The comma here denotes
that there is another selector we would like to call out after "aaron"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  z-index: -10;
  casing-color: lime;
  casing-width: 10;
  casing-opacity: 0.3;
}

-- This is our code block which will style up whatever we called out as a selector
*/

/* Create Settings */

/* User Settings */
/* Sanitas */
settings::sanitas {
  label: tr("Sanitas");
}

setting::user_AaronL {
  type:boolean;
  label:tr("Turn User StriDez On/Off");
  default:true;
  group: "sanitas";
}

setting::user_Angie {
  type: boolean;
  label: tr("Turn User Inigo_Maptoya On/Off");
  default: true;
  group: "sanitas";
}

setting::user_Anita {
  type: boolean;
  label: tr("Turn User natureandchill On/Off");
  default: true;
  group: "sanitas";
}

setting::user_Anja {
  type: boolean;
  label: tr("Turn User PlinyTheYoungest On/Off");
  default: true;
  group: "sanitas";
}

setting::user_ArleneC {
  type:boolean;
  label:tr("Turn User ArleneC On/Off");
  default:true;
  group: "sanitas";
}

setting::user_BreiaV {
  type:boolean;
  label:tr("Turn User 3agleOne On/Off");
  default:true;
  group: "sanitas";
}

setting::user_ByronT {
  type:boolean;
  label:tr("Turn User btorsteinn On/Off");
  default:true;
  group: "sanitas";
}

setting::user_Daniel {
  type: boolean;
  label: tr("Turn User The_Intern On/Off");
  default: true;
  group: "sanitas";
}

setting::user_IanK {
  type:boolean;
  label:tr("Turn User Ikohl On/Off");
  default:true;
  group: "sanitas";
}

setting::user_JessicaH {
  type:boolean;
  label:tr("Turn User JessHed On/Off");
  default:true;
  group: "sanitas";
}

setting::user_LandonS {
  type:boolean;
  label:tr("Turn User luin132 On/Off");
  default:true;
  group: "sanitas";
}

setting::user_LeanneS {
  type:boolean;
  label:tr("Turn User LSkalayo On/Off");
  default:true;
  group: "sanitas";
}

setting::user_LillianM {
  type:boolean;
  label:tr("Turn User noodlemommy On/Off");
  default:true;
  group: "sanitas";
}

setting::user_LoganB {
  type:boolean;
  label:tr("Turn User WinterWitcher On/Off");
  default:true;
  group: "sanitas";
}

setting::user_LoganM {
  type:boolean;
  label:tr("Turn User Dalekokarta On/Off");
  default:true;
  group: "sanitas";
}

setting::user_LoganS {
  type: boolean;
  label: tr("Turn User 127logs On/Off");
  default: true;
  group: "sanitas";
}

setting::user_LouisM {
  type:boolean;
  label:tr("Turn User BlueRanger On/Off");
  default:true;
  group: "sanitas";
}

setting::user_MorgenM {
  type:boolean;
  label:tr("Turn User MMantlo On/Off");
  default:true;
  group: "sanitas";
}

setting::user_NickE {
  type:boolean;
  label:tr("Turn User jedimasterflint On/Off");
  default:true;
  group: "sanitas";
}

setting::user_NutchayaH {
  type:boolean;
  label:tr("Turn User nutchayahongvilai On/Off");
  default:true;
  group: "sanitas";
}

setting::user_RaulM {
  type:boolean;
  label:tr("Turn User RaulKaart On/Off");
  default:true;
  group: "sanitas";
}

setting::user_RickZ {
  type:boolean;
  label:tr("Turn User Ouray On/Off");
  default:true;
  group: "sanitas";
}

setting::user_Riley {
  type: boolean;
  label: tr("Turn User AlwaysSunnyInMapadelphia On/Off");
  default: true;
  group: "sanitas";
}

setting::user_Sierra {
  type:boolean;
  label:tr("Turn User riskybiznu On/Off");
  default: true;
  group: "sanitas";
}

/* Tracking Selectors -- Way and node style BEFORE they are uploaded */

node:modified::modified_layer {
    symbol-shape: circle;
    symbol-size: 22;
    symbol-stroke-color: orange;
    symbol-stroke-width: 3px;
    symbol-fill-opacity: 0.5;
    z-index: -5;
}

way:modified::modified_layer,
node:modified < way::modified_layer {
    width: 6;
    color: transparent;
    opacity: 0;
    casing-width: 7;
    casing-color: #47D608;
    casing-opacity: 0.7;
    z-index: -5;
}

/* QC Styles */
/* User specific styles: Sanitas */

*[osm_user_name() == "StriDez"][setting("user_AaronL")] {
  set .AaronL;
}

*[osm_user_name() == "Inigo_Maptoya"][setting("user_Angie")] {
  set .Angie;
}

*[osm_user_name() == "natureandchill"][setting("user_Anita")] {
  set .Anita;
}

*[osm_user_name() == "PlinyTheYoungest"][setting("user_Anja")] {
  set .Anja;
}

*[osm_user_name() == "ArleneC"][setting("user_ArleneC")] {
  set .ArleneC;
}

*[osm_user_name() == "3agleOne"][setting("user_BreiaV")] {
  set .BreiaV;
}

*[osm_user_name() == "btorsteinn"][setting("user_ByronT")] {
  set .ByronT;
}

*[osm_user_name() == "The_Intern"][setting("user_Daniel")] {
  set .Daniel;
}

*[osm_user_name() == "Ikohl"][setting("user_IanK")] {
  set .IanK;
}

*[osm_user_name() == "JessHed"][setting("user_JessicaH")] {
  set .JessicaH;
}

*[osm_user_name() == "luin132"][setting("user_LandonS")] {
  set .LandonS;
}

*[osm_user_name() == "LSkalayo"][setting("user_LeanneS")] {
  set .LeanneS;
}

*[osm_user_name() == "noodlemommy"][setting("user_LillianM")] {
  set .LillianM;
}

*[osm_user_name() == "WinterWitcher"][setting("user_LoganB")] {
  set .LoganB;
}

*[osm_user_name() == "Dalekokarta"][setting("user_LoganM")] {
  set .LoganM;
}

*[osm_user_name() == "127logs"][setting("user_LoganS")] {
  set .LoganS;
}

*[osm_user_name() == "BlueRanger"][setting("user_LouisM")] {
  set .LouisM;
}

*[osm_user_name() == "MMantlo"][setting("user_MorgenM")] {
  set .MorgenM;
}

*[osm_user_name() == "jedimasterflint"][setting("user_NickE")] {
  set .NickE;
}

*[osm_user_name() == "nutchayahongvilai"][setting("user_NutchayaH")] {
  set .NutchayaH;
}

*[osm_user_name() == "RaulKaart"][setting("user_RaulM")] {
  set .RaulM;
}

*[osm_user_name() == "Ouray"][setting("user_RickZ")] {
  set .RickZ;
}

*[osm_user_name() == "AlwaysSunnyInMapadelphia"][setting("user_Riley")] {
  set .Riley;
}

*[osm_user_name() == "riskybiznu"][setting("user_Sierra")] {
  set .Sierra;
}

/* This is how you search for someone with a space in their name

*[osm_user_name() == "Hector Vector"] {
  set .jman;
}

/* Styling of ways and nodes once they belong to "history" for each individual user */
/*Sanitas*/

way.AaronL,
way.Angie,
way.Anita,
way.Anja,
way.ArleneC,
way.BreiaV,
way.ByronT,
way.Daniel,
way.IanK,
way.JessicaH,
way.LandonS,
way.LeanneS,
way.LillianM,
way.LoganB,
way.LoganM,
way.LoganS,
way.LouisM,
way.MorgenM,
way.NickE,
way.NutchayaH,
way.RaulM,
way.RickZ,
way.Riley,
way.Sierra
{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 7;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}

/*Sanitas*/

node.AaronL,
node.Angie,
node.Anita,
node.Anja,
node.ArleneC,
node.BreiaV,
node.ByronT,
node.Daniel,
node.IanK,
node.JessicaH,
node.LandonS,
node.LeanneS,
node.LillianM,
node.LoganB,
node.LoganM,
node.LoganS,
node.LouisM,
node.MorgenM,
node.NickE,
node.NutchayaH,
node.RaulM,
node.RickZ,
node.Riley,
node.Sierra
{
  symbol-size: 15;
  symbol-shape: triangle;
  symbol-stroke-color: blue;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}

node:selected::selected_layer {
    symbol-shape: circle;
    symbol-size: 22;
    symbol-stroke-color: #DF2E08;
    symbol-stroke-width: 3px;
    symbol-fill-opacity: 0.5;
    z-index: -5;
}
