meta {
  title: "Sinopah QC";
  description: "Highlights features that were created/modified by users";
  watch-modified: true;
  version: "2.0";
  icon: "http://uncrate.com/p/2016/02/smart-kart.jpg";
  min-josm-version: "15289"; /* This style uses groups for settings */
}

/* Notes
1.0 Added styles -- provided by Jenn -- and users -- Ian -- 3/11/2019
1.1 Configured styles -- Louis -- 3/13/2019
1.2 Configured style colors and highlighting -- Ian -- 3/15/2019
1.3 Simplified user lines -- Louis -- 3/18/2019
1.4 Adjusted user, style lines and appearances -- 3/20/2019
1.5 Alphabetized users, added new users, added tips, simplified node highlight & node modified overlays -- Louis,Ian,AndrewP -- 5/15/2019
1.6 Updated to include both Sanitas and Nokhu teams -- Sarah R. -- 3/05/2020
1.7 Updated list of team members -- Logan Barnes -- 4/8/2020
1.8 Updated to include new team categories, new users, and updated title -- Landon S. -- 04/20/2022
2.0 Updated to include more teams, added relations, quality of life improvements and settings -- Landon S. -- 05/4/2022

Tips:

A setting should be created for each separate user:

setting::user_aaron {
  type: boolean;
  label: tr("Turn User Aaron On/Off");
  default: false;
}

-- after :: comes your setting "class" which can be named as you will. Our example show user_aaron
-- Type: boolean; should always exist
-- label: tr("Anything you want to put here") -> This is what shows up under setting in JOSM
-- Default: false -> the setting will remain disabled on launch until a user enables it

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

at which point, it becomes necessary to create a selector statement for your user:

*[osm_user_name() == "vespax"][setting("user_aaron")] {
  set .aaron;
}

-- * denotes what you are selecting, in this case, every element type in OSM
-- [osm_user_name() == "vespax"] -> this is necessary and should be constructed as such.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to construct time stamps, you can use the following:

String: "[eval(JOSM_search("timestamp:2016-02-20/"))]" can be modified in several ways
"timestamp:2016-02-20/" -- Shows all edits edited after date
"timestamp:2016-02-20/2016-02-22" -- Shows all edits after 02-20 but before 02-22
"timestamp:2016-02/ Day and Month can be removed to widen the range of edits shown, example here shows all edits starting in FEB2016.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

So, a timestamped search would look like this:

*[osm_user_name() == "IndianaJones737"))][eval(JOSM_search("timestamp:2016-03-14/2016-03-15"] {
  casing-width: 10;
  casing-color: green;
  casing-opacity: 0.2;
}

-- set .aaron; -> this is setting the class for this statement. This allows us to call it out later on. Classes
can be set like that or as so -> set aaron;

This is how you search for someone with a space in their name

*[osm_user_name() == "Hector Vector"] {
  set .jman;
}

or

relation[eval(JOSM_search("user:\"Hector Vector\""))]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

way.aaron, & node.aaron,

-- This shows that we are looking for all ways/nodes which meet the "aaron" class. The comma here denotes
that there is another selector we would like to call out after "aaron"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  z-index: -10;
  casing-color: lime;
  casing-width: 10;
  casing-opacity: 0.3;
}

-- This is our code block which will style up whatever we called out as a selector 
*/



/* User Settings */

/* Krakatoa */

settings::krakatoa {
  label: tr("Krakatoa");
}

setting::user_JoseL {
  type:boolean;
  label:tr("JDKaart|Jose Lopez-Aguilera");
  default:true;
  group: "krakatoa";
}

setting::user_KiraM {
  type:boolean;
  label:tr("martymcfly14|Kira Morales");
  default:true;
  group: "krakatoa";
}

setting::user_LoganB {
  type:boolean;
  label:tr("WinterWitcher|Logan Barnes");
  default:true;
  group: "krakatoa";
}

setting::user_ReillyM {
  type:boolean;
  label:tr("smileyreilly|Reilly McGonagil");
  default:true;
  group: "krakatoa";
}

setting::user_RyanM {
  type:boolean;
  label:tr("birdeatscake|Ryan Martin");
  default:true;
  group: "krakatoa";
}

/* Quandary */

settings::quandary {
  label: tr("Quandary");
}

setting::user_CorbanG {
  type:boolean;
  label:tr("Corban8|Corban Gardner");
  default:true;
  group: "quandary";
}

setting::user_HamishH {
  type:boolean;
  label:tr("hairyhaggis|Hamish Henderson");
  default:true;
  group: "quandary";
}

setting::user_IanMa {
  type:boolean;
  label:tr("Baconcrisp|Ian Malott");
  default:true;
  group: "quandary";
}

setting::user_JakeK {
  type:boolean;
  label:tr("CoolGuyJake|Jake Kaplan");
  default:true;
  group: "quandary";
}

setting::user_JasonH {
  type:boolean;
  label:tr("AnonJason|Jason Hurst");
  default:true;
  group: "quandary";
}

setting::user_JorgeA {
  type:boolean;
  label:tr("JAAS|Jorge Aguirre");
  default:true;
  group: "quandary";
}

setting::user_LaurenH {
  type:boolean;
  label:tr("Pegasus21|Lauren Healy");
  default:true;
  group: "quandary";
}

setting::user_PaceM {
  type:boolean;
  label:tr("InnerPace|Pace Martin");
  default:true;
  group: "quandary";
}

setting::user_PaulS {
  type:boolean;
  label:tr("hayduke1275|Paul Sharp");
  default:true;
  group: "quandary";
}

setting::user_ToddK {
  type:boolean;
  label:tr("Toddtodd|Todd Kegley");
  default:true;
  group: "quandary";
}

setting::user_TomH {
  type:boolean;
  label:tr("tomincolorado|Tom Hamann");
  default:true;
  group: "quandary";
}

setting::user_WilliamF {
  type:boolean;
  label:tr("Buddy-the-Elf|William Foster");
  default:true;
  group: "quandary";
}

/* Sanitas */

settings::sanitas {
  label: tr("Sanitas");
}

setting::user_AaronL {
  type:boolean;
  label:tr("StriDez|Aaron Lewis");
  default:true;
  group: "sanitas";
}

setting::user_AlbaW {
  type:boolean;
  label:tr("albahabla|Alba West");
  default:true;
  group: "sanitas";
}

setting::user_Angie {
  type: boolean;
  label: tr("Inigo_Maptoya|Angie Hernandez");
  default: true;
  group: "sanitas";
}

setting::user_Anja {
  type: boolean;
  label: tr("PlinyTheYoungest|Anja Riedel");
  default: true;
  group: "sanitas";
}

setting::user_ArleneC {
  type:boolean;
  label:tr("ArleneC|Arlene Coglietti");
  default:true;
  group: "sanitas";
}

setting::user_BrandonP {
  type:boolean;
  label:tr("Almapthea|Brandon Piechota");
  default:true;
  group: "sanitas";
}

setting::user_BreiaV {
  type:boolean;
  label:tr("ToastShark|Breia Velarde");
  default:true;
  group: "sanitas";
}

setting::user_ColterM {
  type:boolean;
  label:tr("Coltrain|Colter McKay");
  default:true;
  group: "sanitas";
}

setting::user_Daniel {
  type: boolean;
  label: tr("The_Intern|Daniel Arinze");
  default: true;
  group: "sanitas";
}

setting::user_GabeG {
  type: boolean;
  label: tr("GbabethemapGod|Gabe Gueretta");
  default: true;
  group: "sanitas";
}

setting::user_IanK {
  type:boolean;
  label:tr("Ikohl|Ian Kohlman");
  default:true;
  group: "sanitas";
}

setting::user_IanMc {
  type:boolean;
  label:tr("Winterson|Ian McCollum");
  default:true;
  group: "sanitas";
}

setting::user_JamesP {
  type:boolean;
  label:tr("eggothy|James Peake");
  default:true;
  group: "sanitas";
}

setting::user_JessicaH {
  type:boolean;
  label:tr("Mapistopheles|Jessica Hedlun");
  default:true;
  group: "sanitas";
}

setting::user_LandonS {
  type:boolean;
  label:tr("luin132|Landon Sauvage");
  default:true;
  group: "sanitas";
}

setting::user_LeanneS {
  type:boolean;
  label:tr("LSkalayo|Leanne Schneider");
  default:true;
  group: "sanitas";
}

setting::user_LillianM {
  type:boolean;
  label:tr("noodlemommy|Lillian Moore");
  default:true;
  group: "sanitas";
}

setting::user_LoganM {
  type:boolean;
  label:tr("WarpathPeacock|Logan McGovern");
  default:true;
  group: "sanitas";
}

setting::user_LoganS {
  type: boolean;
  label: tr("127logs|Logan Smith");
  default: true;
  group: "sanitas";
}

setting::user_MorgenM {
  type:boolean;
  label:tr("MMantlo|Morgen Mantlo");
  default:true;
  group: "sanitas";
}

setting::user_NickE {
  type:boolean;
  label:tr("jedimasterflint|Nick Eglet");
  default:true;
  group: "sanitas";
}

setting::user_RickZ {
  type:boolean;
  label:tr("Ouray|Rick Zortman");
  default:true;
  group: "sanitas";
}

setting::user_Riley {
  type: boolean;
  label: tr("AlwaysSunnyInMapadelphia|Riley White");
  default: true;
  group: "sanitas";
}

setting::user_Sierra {
  type:boolean;
  label: tr("riskybiznu|Sierra Ethridge");
  default: true;
  group: "sanitas";
}

/* Seattle */

settings::seattle {
  label: tr("Seattle");
}

setting::user_AlbertG {
  type:boolean;
  label:tr("TheJAwesome1|Albert Gamponia");
  default:true;
  group: "seattle";
}

setting::user_AlecH {
  type:boolean;
  label:tr("CapAhab|Alec Haberman");
  default:true;
  group: "seattle";
}

setting::user_AnoudA {
  type:boolean;
  label:tr("And_12|Anoud Aldrras");
  default:true;
  group: "seattle";
}

setting::user_EduardoT {
  type:boolean;
  label:tr("VigotheCarpathian|Eduardo Torrelli");
  default:true;
  group: "seattle";
}

setting::user_EvanD {
  type:boolean;
  label:tr("Evandering|Evan Derickson");
  default:true;
  group: "seattle";
}

setting::user_FasickM {
  type:boolean;
  label:tr("Goatosm|Fasick Mulugeta");
  default:true;
  group: "seattle";
}

setting::user_HoraceH {
  type:boolean;
  label:tr("Hoordinates|Horace Hou");
  default:true;
  group: "seattle";
}

setting::user_JasonC {
  type:boolean;
  label:tr("Red_Ranger|Jason Chen");
  default:true;
  group: "seattle";
}

setting::user_JenniferS {
  type:boolean;
  label:tr("geoJenn|Jennifer Swagert");
  default:true;
  group: "seattle";
}

setting::user_MickT {
  type:boolean;
  label:tr("trigeo|Mick Tribe");
  default:true;
  group: "seattle";
}

setting::user_NeddyD {
  type:boolean;
  label:tr("Ned_Stark|Neddy Dondup");
  default:true;
  group: "seattle";
}

setting::user_NiyomiK {
  type:boolean;
  label:tr("n1y0m1|Niyomi Khalid");
  default:true;
  group: "seattle";
}

setting::user_RikH {
  type:boolean;
  label:tr("whatmeinfallible|Rik Haines");
  default:true;
  group: "seattle";
}

setting::user_StephanieH {
  type:boolean;
  label:tr("Avocadough!|Stephanie Hutton");
  default:true;
  group: "seattle";
}

setting::user_ViancaS {
  type:boolean;
  label:tr("Amonite1025|Vianca Severino");
  default:true;
  group: "seattle";
}

/* Retrieving User "History" */

/* Krakatoa */

*[osm_user_name() == "JDKaart"][setting("user_JoseL")],
*[osm_user_name() == "birdeatscake"][setting("user_KiraM")],
*[osm_user_name() == "WinterWitcher"][setting("user_LoganB")],
*[osm_user_name() == "smileyreilly"][setting("user_ReillyM")],
*[osm_user_name() == "martymcfly14"][setting("user_RyanM")],

/* Quandary */

*[osm_user_name() == "Corban8"][setting("user_CorbanG")],
*[osm_user_name() == "hairyhaggis"][setting("user_HamishH")],
*[osm_user_name() == "Baconcrisp"][setting("user_IanMa")],
*[osm_user_name() == "CoolGuyJake"][setting("user_JakeK")],
*[osm_user_name() == "AnonJason"][setting("user_JasonH")],
*[osm_user_name() == "JAAS"][setting("user_JorgeA")],
*[osm_user_name() == "Pegasus21"][setting("user_LaurenH")],
*[osm_user_name() == "InnerPace"][setting("user_PaceM")],
*[osm_user_name() == "hayduke1275"][setting("user_PaulS")],
*[osm_user_name() == "Toddtodd"][setting("user_ToddK")],
*[osm_user_name() == "tomincolorado"][setting("user_TomH")],
*[osm_user_name() == "Buddy-the-Elf"][setting("user_WilliamF")],

/* Sanitas */

*[osm_user_name() == "StriDez"][setting("user_AaronL")],
*[osm_user_name() == "albahabla"][setting("user_AlbaW")],
*[osm_user_name() == "Inigo_Maptoya"][setting("user_Angie")],
*[osm_user_name() == "PlinyTheYoungest"][setting("user_Anja")],
*[osm_user_name() == "ArleneC"][setting("user_ArleneC")],
*[osm_user_name() == "Almapthea"][setting("user_BrandonP")],
*[osm_user_name() == "ToastShark"][setting("user_BreiaV")],
*[osm_user_name() == "Coltrain"][setting("user_ColterM")],
*[osm_user_name() == "The_Intern"][setting("user_Daniel")],
*[osm_user_name() == "GbabethemapGod"][setting("user_GabeG")],
*[osm_user_name() == "Ikohl"][setting("user_IanK")],
*[osm_user_name() == "Winterson"][setting("user_IanMc")],
*[osm_user_name() == "eggothy"][setting("user_JamesP")],
*[osm_user_name() == "Mapistopheles"][setting("user_JessicaH")],
*[osm_user_name() == "luin132"][setting("user_LandonS")],
*[osm_user_name() == "LSkalayo"][setting("user_LeanneS")],
*[osm_user_name() == "noodlemommy"][setting("user_LillianM")],
*[osm_user_name() == "WarpathPeacock"][setting("user_LoganM")],
*[osm_user_name() == "127logs"][setting("user_LoganS")],
*[osm_user_name() == "MMantlo"][setting("user_MorgenM")],
*[osm_user_name() == "jedimasterflint"][setting("user_NickE")],
*[osm_user_name() == "Ouray"][setting("user_RickZ")],
*[osm_user_name() == "AlwaysSunnyInMapadelphia"][setting("user_Riley")],
*[osm_user_name() == "riskybiznu"][setting("user_Sierra")],

/* Seattle */

*[osm_user_name() == "TheJAwesome1"][setting("user_AlbertG")],
*[osm_user_name() == "CapAhab"][setting("user_AlecH")],
*[osm_user_name() == "And_12"][setting("user_AnoudA")],
*[osm_user_name() == "VigotheCarpathian"][setting("user_EduardoT")],
*[osm_user_name() == "Evandering"][setting("user_EvanD")],
*[osm_user_name() == "Goatosm"][setting("user_FasickM")],
*[osm_user_name() == "Hoordinates"][setting("user_HoraceH")],
*[osm_user_name() == "Red_Ranger"][setting("user_JasonC")],
*[osm_user_name() == "geoJenn"][setting("user_JenniferS")],
*[osm_user_name() == "trigeo"][setting("user_MickT")],
*[osm_user_name() == "Ned_Stark"][setting("user_NeddyD")],
*[osm_user_name() == "n1y0m1"][setting("user_NiyomiK")],
*[osm_user_name() == "whatmeinfallible"][setting("user_RikH")],
*[osm_user_name() == "Avocadough!"][setting("user_StephanieH")],
*[osm_user_name() == "Amonite1025"][setting("user_ViancaS")]
{
  set .User;
}

/* Retrieving User "Relation History" */

/* Krakatoa */

relation[eval(JOSM_search("user:JDKaart"))] > node[setting("user_JoseL")],
relation[eval(JOSM_search("user:JDKaart"))] > way[setting("user_JoseL")],
relation[eval(JOSM_search("user:birdeatscake"))] > node[setting("user_KiraM")],
relation[eval(JOSM_search("user:birdeatscake"))] > way[setting("user_KiraM")],
relation[eval(JOSM_search("user:WinterWitcher"))] > node[setting("user_LoganB")],
relation[eval(JOSM_search("user:WinterWitcher"))] > way[setting("user_LoganB")],
relation[eval(JOSM_search("user:smileyreilly"))] > node[setting("user_ReillyM")],
relation[eval(JOSM_search("user:smileyreilly"))] > way[setting("user_ReillyM")],
relation[eval(JOSM_search("user:martymcfly14"))] > node[setting("user_RyanM")],
relation[eval(JOSM_search("user:martymcfly14"))] > way[setting("user_RyanM")],

/* Quandary */

relation[eval(JOSM_search("user:Corban8"))] > node[setting("user_CorbanG")],
relation[eval(JOSM_search("user:Corban8"))] > way[setting("user_CorbanG")],
relation[eval(JOSM_search("user:hairyhaggis"))] > node[setting("user_HamishH")],
relation[eval(JOSM_search("user:hairyhaggis"))] > way[setting("user_HamishH")],
relation[eval(JOSM_search("user:Baconcrisp"))] > node[setting("user_IanMa")],
relation[eval(JOSM_search("user:Baconcrisp"))] > way[setting("user_IanMa")],
relation[eval(JOSM_search("user:CoolGuyJake"))] > node[setting("user_JakeK")],
relation[eval(JOSM_search("user:CoolGuyJake"))] > way[setting("user_JakeK")],
relation[eval(JOSM_search("user:AnonJason"))] > node[setting("user_JasonH")],
relation[eval(JOSM_search("user:AnonJason"))] > way[setting("user_JasonH")],
relation[eval(JOSM_search("user:JAAS"))] > node[setting("user_JorgeA")],
relation[eval(JOSM_search("user:JAAS"))] > way[setting("user_JorgeA")],
relation[eval(JOSM_search("user:Pegasus21"))] > node[setting("user_LaurenH")],
relation[eval(JOSM_search("user:Pegasus21"))] > way[setting("user_LaurenH")],
relation[eval(JOSM_search("user:InnerPace"))] > node[setting("user_PaceM")],
relation[eval(JOSM_search("user:InnerPace"))] > way[setting("user_PaceM")],
relation[eval(JOSM_search("user:hayduke1275"))] > node[setting("user_PaulS")],
relation[eval(JOSM_search("user:hayduke1275"))] > way[setting("user_PaulS")],
relation[eval(JOSM_search("user:Toddtodd"))] > node[setting("user_ToddK")],
relation[eval(JOSM_search("user:Toddtodd"))] > way[setting("user_ToddK")],
relation[eval(JOSM_search("user:tomincolorado"))] > node[setting("user_TomH")],
relation[eval(JOSM_search("user:tomincolorado"))] > way[setting("user_TomH")],
relation[eval(JOSM_search("user:Buddy-the-Elf"))] > node[setting("user_WilliamF")],
relation[eval(JOSM_search("user:Buddy-the-Elf"))] > way[setting("user_WilliamF")],

/* Sanitas */

relation[eval(JOSM_search("user:StriDez"))] > node[setting("user_AaronL")],
relation[eval(JOSM_search("user:StriDez"))] > way[setting("user_AaronL")],
relation[eval(JOSM_search("user:albahabla"))] > node[setting("user_AlbaW")],
relation[eval(JOSM_search("user:albahabla"))] > way[setting("user_AlbaW")],
relation[eval(JOSM_search("user:Inigo_Maptoya"))] > node[setting("user_Angie")],
relation[eval(JOSM_search("user:Inigo_Maptoya"))] > way[setting("user_Angie")],
relation[eval(JOSM_search("user:PlinyTheYoungest"))] > node[setting("user_Anja")],
relation[eval(JOSM_search("user:PlinyTheYoungest"))] > way[setting("user_Anja")],
relation[eval(JOSM_search("user:ArleneC"))] > node[setting("user_ArleneC")],
relation[eval(JOSM_search("user:ArleneC"))] > way[setting("user_ArleneC")],
relation[eval(JOSM_search("user:Almapthea"))] > node[setting("user_BrandonP")],
relation[eval(JOSM_search("user:Almapthea"))] > way[setting("user_BrandonP")],
relation[eval(JOSM_search("user:ToastShark"))] > node[setting("user_BreiaV")],
relation[eval(JOSM_search("user:ToastShark"))] > way[setting("user_BreiaV")],
relation[eval(JOSM_search("user:Coltrain"))] > node[setting("user_ColterM")],
relation[eval(JOSM_search("user:Coltrain"))] > way[setting("user_ColterM")],
relation[eval(JOSM_search("user:The_Intern"))] > node[setting("user_Daniel")],
relation[eval(JOSM_search("user:The_Intern"))] > way[setting("user_Daniel")],
relation[eval(JOSM_search("user:GbabethemapGod"))] > node[setting("user_GabeG")],
relation[eval(JOSM_search("user:GbabethemapGod"))] > way[setting("user_GabeG")],
relation[eval(JOSM_search("user:Ikohl"))] > node[setting("user_IanK")],
relation[eval(JOSM_search("user:Ikohl"))] > way[setting("user_IanK")],
relation[eval(JOSM_search("user:Winterson"))] > node[setting("user_IanMc")],
relation[eval(JOSM_search("user:Winterson"))] > way[setting("user_IanMc")],
relation[eval(JOSM_search("user:eggothy"))] > node[setting("user_JamesP")],
relation[eval(JOSM_search("user:eggothy"))] > way[setting("user_JamesP")],
relation[eval(JOSM_search("user:Mapistopheles"))] > node[setting("user_JessicaH")],
relation[eval(JOSM_search("user:Mapistopheles"))] > way[setting("user_JessicaH")],
relation[eval(JOSM_search("user:luin132"))] > node[setting("user_LandonS")],
relation[eval(JOSM_search("user:luin132"))] > way[setting("user_LandonS")],
relation[eval(JOSM_search("user:LSkalayo"))] > node[setting("user_LeanneS")],
relation[eval(JOSM_search("user:LSkalayo"))] > way[setting("user_LeanneS")],
relation[eval(JOSM_search("user:noodlemommy"))] > node[setting("user_LillianM")],
relation[eval(JOSM_search("user:noodlemommy"))] > way[setting("user_LillianM")],
relation[eval(JOSM_search("user:WarpathPeacock"))] > node[setting("user_LoganM")],
relation[eval(JOSM_search("user:WarpathPeacock"))] > way[setting("user_LoganM")],
relation[eval(JOSM_search("user:127logs"))] > node[setting("user_LoganS")],
relation[eval(JOSM_search("user:127logs"))] > way[setting("user_LoganS")],
relation[eval(JOSM_search("user:MMantlo"))] > node[setting("user_MorgenM")],
relation[eval(JOSM_search("user:MMantlo"))] > way[setting("user_MorgenM")],
relation[eval(JOSM_search("user:jedimasterflint"))] > node[setting("user_NickE")],
relation[eval(JOSM_search("user:jedimasterflint"))] > way[setting("user_NickE")],
relation[eval(JOSM_search("user:Ouray"))] > node[setting("user_RickZ")],
relation[eval(JOSM_search("user:Ouray"))] > way[setting("user_RickZ")],
relation[eval(JOSM_search("user:AlwaysSunnyInMapadelphia"))] > node[setting("user_Riley")],
relation[eval(JOSM_search("user:AlwaysSunnyInMapadelphia"))] > way[setting("user_Riley")],
relation[eval(JOSM_search("user:riskybiznu"))] > node[setting("user_Sierra")],
relation[eval(JOSM_search("user:riskybiznu"))] > way[setting("user_Sierra")],

/* Seattle */

relation[eval(JOSM_search("user:TheJAwesome1"))] > node[setting("user_AlbertG")],
relation[eval(JOSM_search("user:TheJAwesome1"))] > way[setting("user_AlbertG")],
relation[eval(JOSM_search("user:CapAhab"))] > node[setting("user_AlecH")],
relation[eval(JOSM_search("user:CapAhab"))] > way[setting("user_AlecH")],
relation[eval(JOSM_search("user:And_12"))] > node[setting("user_AnoudA")],
relation[eval(JOSM_search("user:And_12"))] > way[setting("user_AnoudA")],
relation[eval(JOSM_search("user:VigotheCarpathian"))] > node[setting("user_EduardoT")],
relation[eval(JOSM_search("user:VigotheCarpathian"))] > way[setting("user_EduardoT")],
relation[eval(JOSM_search("user:Evandering"))] > node[setting("user_EvanD")],
relation[eval(JOSM_search("user:Evandering"))] > way[setting("user_EvanD")],
relation[eval(JOSM_search("user:Goatosm"))] > node[setting("user_FasickM")],
relation[eval(JOSM_search("user:Goatosm"))] > way[setting("user_FasickM")],
relation[eval(JOSM_search("user:Hoordinates"))] > node[setting("user_HoraceH")],
relation[eval(JOSM_search("user:Hoordinates"))] > way[setting("user_HoraceH")],
relation[eval(JOSM_search("user:Red_Ranger"))] > node[setting("user_JasonC")],
relation[eval(JOSM_search("user:Red_Ranger"))] > way[setting("user_JasonC")],
relation[eval(JOSM_search("user:geoJenn"))] > node[setting("user_JenniferS")],
relation[eval(JOSM_search("user:geoJenn"))] > way[setting("user_JenniferS")],
relation[eval(JOSM_search("user:trigeo"))] > node[setting("user_MickT")],
relation[eval(JOSM_search("user:trigeo"))] > way[setting("user_MickT")],
relation[eval(JOSM_search("user:Ned_Stark"))] > node[setting("user_NeddyD")],
relation[eval(JOSM_search("user:Ned_Stark"))] > way[setting("user_NeddyD")],
relation[eval(JOSM_search("user:n1y0m1"))] > node[setting("user_NiyomiK")],
relation[eval(JOSM_search("user:n1y0m1"))] > way[setting("user_NiyomiK")],
relation[eval(JOSM_search("user:whatmeinfallible"))] > node[setting("user_RikH")],
relation[eval(JOSM_search("user:whatmeinfallible"))] > way[setting("user_RikH")],
relation[eval(JOSM_search("user:Avocadough!"))] > node[setting("user_StephanieH")],
relation[eval(JOSM_search("user:Avocadough!"))] > way[setting("user_StephanieH")],
relation[eval(JOSM_search("user:Amonite1025"))] > node[setting("user_ViancaS")],
relation[eval(JOSM_search("user:Amonite1025"))] > way[setting("user_ViancaS")]
{
set .Relation
}

/* Styling of nodes, ways, and relations once they belong to "Relation History" */

/* Lower properties get greater priority */

node[setting(relations)].Relation { 
  symbol-shape: triangle;
  symbol-size: 15;
  symbol-stroke-color: #225715; /* Dark Green */
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.35;
  z-index: -10;
}

way[setting(relations)].Relation {
  casing-width: 7.5;
  casing-color: #7a4b00; /* Brown */
  casing-opacity: 0.7;
  z-index: -10;
}

/* Styling of nodes, ways, and relations once they belong to "History" */

node!:modified.User {
  symbol-shape: triangle;
  symbol-size: 15;
  symbol-stroke-color: blue;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -10;
}

way!:modified.User {
  z-index: -10;
  casing-color: #B108D6; /* Purple */
  casing-width: 7;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}

relation[setting(relations)]!:modified.User > node {
  symbol-shape: triangle;
  symbol-size: 15;
  symbol-stroke-color: #49baba; /* Sky Blue */
  symbol-stroke-width: 3px;
  symbol-fill-opacity: .5;
  z-index: -10;
}

relation[setting(relations)]!:modified.User > way {
  casing-width: 7;
  casing-color: #1396ba; /* Light Blue */
  casing-opacity: 0.55;
  z-index: -10;
}

/* Tracking Selectors -- Way and node style BEFORE they are uploaded */

node:selected::selected_layer {
    symbol-shape: circle;
    symbol-size: 22;
    symbol-stroke-color: #DF2E08; /* Red */
    symbol-stroke-width: 3px;
    symbol-fill-opacity: 0.5;
    z-index: -1;
}

node:modified::modified_layer {
    symbol-shape: circle;
    symbol-size: 22;
    symbol-stroke-color: orange;
    symbol-stroke-width: 3px;
    symbol-fill-opacity: 0.5;
    z-index: -7;
}

way:modified::modified_layer,
node:modified < way::modified_layer {
    width: 7;
    color: transparent;
    opacity: 0;
    casing-width: 7;
    casing-color: #47D608; /* Lime */
    casing-opacity: 0.7;
    z-index: -7;
}

relation[setting(relations)]:modified > node::modified_layer {
  symbol-shape: circle;
  symbol-size: 22;
  symbol-stroke-color: #ba752b; /* Orange */
  symbol-stroke-width: 3px;
  symbol-fill-opacity: .5;
  z-index: -5;
}

relation[setting(relations)]:modified > way::modified_layer {
  width: 7;
  color: transparent;
  opacity: 0;
  casing-width: 7;
  casing-color: #007a60; /* Sea Green */
  casing-opacity: 0.55;
  z-index: -5;
}

/* Paint Style Settings */

settings::settings {
  label: tr("Settings");
}

setting::relations {
  type: boolean;
  label: tr("Relations");
  default: false;
  group: "settings";
 }

setting::node_off {
  type: boolean;
  label: tr("Remove Node Icons");
  default: false;
  group: "settings";
 }

*[setting("node_off")] {
set .icon;
}

node.icon {
icon-image:N/A;
}
