meta {
  title: "Kaart QC";
  description: "Highlights features that were created/modified by users";
  watch-modified: true;
  version: "2.0";
  icon: "http://uncrate.com/p/2016/02/smart-kart.jpg";
  min-josm-version: "15289"; /* This style uses groups for settings */
}

/* Notes
1.0 Added styles -- provided by Jenn -- and users -- Ian -- 3/11/2019
1.1 Configured styles -- Louis -- 3/13/2019
1.2 Configured style colors and highlighting -- Ian -- 3/15/2019
1.3 Simplified user lines -- Louis -- 3/18/2019
1.4 Adjusted user, style lines and appearances -- 3/20/2019
1.5 Alphabetized users, added new users, added tips, simplified node highlight & node modified overlays -- Louis,Ian,AndrewP -- 5/15/2019
1.6 Updated to include both Sanitas and Nokhu teams -- Sarah R. -- 3/05/2020
1.7 Updated list of team members -- Logan Barnes -- 4/8/2020
1.8 Updated to include new team categories, new users, and updated title -- Landon S. -- 04/20/2022
2.0 Updated to include more teams, added relations, and added settings -- Landon S. -- 05/4/2022

Tips:

A setting should be created for each separate user:

setting::user_aaron {
  type: boolean;
  label: tr("Turn User Aaron On/Off");
  default: false;
}

-- after :: comes your setting "class" which can be named as you will. Our example show user_aaron
-- Type: boolean; should always exist
-- label: tr("Anything you want to put here") -> This is what shows up under setting in JOSM
-- Default: false -> the setting will remain disabled on launch until a user enables it

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

at which point, it becomes necessary to create a selector statement for your user:

*[osm_user_name() == "vespax"][setting("user_aaron")] {
  set .aaron;
}

-- * denotes what you are selecting, in this case, every element type in OSM
-- [osm_user_name() == "vespax"] -> this is necessary and should be constructed as such.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to construct time stamps, you can use the following:

String: "[eval(JOSM_search("timestamp:2016-02-20/"))]" can be modified in several ways
"timestamp:2016-02-20/" -- Shows all edits edited after date
"timestamp:2016-02-20/2016-02-22" -- Shows all edits after 02-20 but before 02-22
"timestamp:2016-02/ Day and Month can be removed to widen the range of edits shown, example here shows all edits starting in FEB2016.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

So, a timestamped search would look like this:

*[osm_user_name() == "IndianaJones737"))][eval(JOSM_search("timestamp:2016-03-14/2016-03-15"] {
  casing-width: 10;
  casing-color: green;
  casing-opacity: 0.2;
}

-- set .aaron; -> this is setting the class for this statement. This allows us to call it out later on. Classes
can be set like that or as so -> set aaron;

This is how you search for someone with a space in their name

*[osm_user_name() == "Hector Vector"] {
  set .jman;
}

or

relation[eval(JOSM_search("user:\"Hector Vector\""))]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

way.aaron, & node.aaron,

-- This shows that we are looking for all ways/nodes which meet the "aaron" class. The comma here denotes
that there is another selector we would like to call out after "aaron"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  z-index: -10;
  casing-color: lime;
  casing-width: 10;
  casing-opacity: 0.3;
}

-- This is our code block which will style up whatever we called out as a selector 
*/



/* User Settings */

/* Quandary */

settings::quandary {
  label: tr("Quandary");
}

setting::user_CorbanG {
  type:boolean;
  label:tr("Corban8|Corban Gardner");
  default:true;
  group: "quandary";
}

setting::user_HamishH {
  type:boolean;
  label:tr("hairyhaggis|Hamish Henderson");
  default:true;
  group: "quandary";
}

setting::user_IanM {
  type:boolean;
  label:tr("Baconcrisp|Ian Malott");
  default:true;
  group: "quandary";
}

setting::user_LaurenH {
  type:boolean;
  label:tr("Pegasus21|Lauren Healy");
  default:true;
  group: "quandary";
}

setting::user_PaulS {
  type:boolean;
  label:tr("hayduke1275|Paul Sharp");
  default:true;
  group: "quandary";
}

setting::user_RyanM {
  type:boolean;
  label:tr("martymcfly14|Ryan Martin");
  default:true;
  group: "quandary";
}

setting::user_ToddK {
  type:boolean;
  label:tr("Toddtodd|Todd Kegley");
  default:true;
  group: "quandary";
}

setting::user_WilliamF {
  type:boolean;
  label:tr("Buddy-the-Elf|William Foster");
  default:true;
  group: "quandary";
}

setting::user_GabeG {
  type: boolean;
  label: tr("GbabethemapGod|Gabe Gueretta");
  default: true;
  group: "quandary";
}

setting::user_JoseL {
  type:boolean;
  label:tr("Mendicant_Slug_097|Jose Lopez-Aguilera");
  default:true;
  group: "quandary";
}

setting::user_LoganS {
  type: boolean;
  label: tr("127logs|Logan Smith");
  default: true;
  group: "quandary";
}

setting::user_RoanH {
  type: boolean;
  label: tr("Blathmac98|Roan Hall");
  default: true;
  group: "quandary";
}

setting::user_BrittanyB {
  type: boolean;
  label: tr("Brittigra|Brittany Buckley");
  default: true;
  group: "quandary";
}

setting::user_IsaacV {
  type: boolean;
  label: tr("Bit_by_Bit|Isaac Van Horn");
  default: true;
  group: "quandary";
}

setting::user_GarrettS {
  type: boolean;
  label: tr("Huge_OSM_Fan|Garrett Smith");
  default: true;
  group: "quandary";
}


/* Retrieving User "History" */

/* Quandary Class*/
*[osm_user_id() == 4240913][setting("user_CorbanG")],
*[osm_user_id() == 10541438][setting("user_HamishH")],
*[osm_user_id() == 3778777][setting("user_IanM")],
*[osm_user_id() == 13510663][setting("user_LaurenH")],
*[osm_user_id() == 12854712][setting("user_PaulS")],
*[osm_user_id() == 14434812][setting("user_RyanM")],
*[osm_user_id() == 13560445][setting("user_ToddK")],
*[osm_user_id() == 9476874][setting("user_WilliamF")],
*[osm_user_id() == 15314242][setting("user_GabeG")],
*[osm_user_id() == 14389175][setting("user_JoseL")],
*[osm_user_id() == 9633823][setting("user_LoganS")],
*[osm_user_id() == 14389165][setting("user_RoanH")]
{
  set .quandarystyle;
}

/* Retrieving User "Relation History" */

/* Quandary */

relation[eval(JOSM_search("user:Corban8"))] > node[setting("user_CorbanG")],
relation[eval(JOSM_search("user:Corban8"))] > way[setting("user_CorbanG")],
relation[eval(JOSM_search("user:hairyhaggis"))] > node[setting("user_HamishH")],
relation[eval(JOSM_search("user:hairyhaggis"))] > way[setting("user_HamishH")],
relation[eval(JOSM_search("user:Baconcrisp"))] > node[setting("user_IanM")],
relation[eval(JOSM_search("user:Baconcrisp"))] > way[setting("user_IanM")],
relation[eval(JOSM_search("user:Pegasus21"))] > node[setting("user_LaurenH")],
relation[eval(JOSM_search("user:Pegasus21"))] > way[setting("user_LaurenH")],
relation[eval(JOSM_search("user:hayduke1275"))] > node[setting("user_PaulS")],
relation[eval(JOSM_search("user:hayduke1275"))] > way[setting("user_PaulS")],
relation[eval(JOSM_search("user:martymcfly14"))] > node[setting("user_RyanM")],
relation[eval(JOSM_search("user:martymcfly14"))] > way[setting("user_RyanM")],
relation[eval(JOSM_search("user:Toddtodd"))] > node[setting("user_ToddK")],
relation[eval(JOSM_search("user:Toddtodd"))] > way[setting("user_ToddK")],
relation[eval(JOSM_search("user:Buddy-the-Elf"))] > node[setting("user_WilliamF")],
relation[eval(JOSM_search("user:Buddy-the-Elf"))] > way[setting("user_WilliamF")],
relation[eval(JOSM_search("user:GbabethemapGod"))] > node[setting("user_GabeG")],
relation[eval(JOSM_search("user:GbabethemapGod"))] > way[setting("user_GabeG")],
relation[eval(JOSM_search("user:Mendicant_Slug_097"))] > node[setting("user_JoseL")],
relation[eval(JOSM_search("user:Mendicant_Slug_097"))] > way[setting("user_JoseL")],
relation[eval(JOSM_search("user:127logs"))] > node[setting("user_LoganS")],
relation[eval(JOSM_search("user:127logs"))] > way[setting("user_LoganS")],
relation[eval(JOSM_search("user:Blathmac98"))] > node[setting("user_RoanH")],
relation[eval(JOSM_search("user:Blathmac98"))] > way[setting("user_RoanH")]
{
set .Relation
}

/* Styling of nodes, ways, and relations once they belong to "Relation History" */

/* Lower properties get greater priority */

node[setting(relations)].Relation { 
  symbol-shape: triangle;
  symbol-size: 15;
  symbol-stroke-color: #225715; /* Dark Green */
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.35;
  z-index: -10;
}

way[setting(relations)].Relation {
  casing-width: 7.5;
  casing-color: #7a4b00; /* Brown */
  casing-opacity: 0.7;
  z-index: -10;
}

/* Styling of nodes, ways, and relations once they belong to "History" */

node!:modified.quandarystyle {
  symbol-shape: triangle;
  symbol-size: 15;
  symbol-stroke-color: blue;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -10;
}

way!:modified.quandarystyle {
  z-index: -10;
  casing-color: #B108D6; /* Purple */
  casing-width: 7;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}

relation[setting(relations)]!:modified.Relation > node.quandarystyle {
  symbol-shape: triangle;
  symbol-size: 15;
  symbol-stroke-color: #49baba; /* Sky Blue */
  symbol-stroke-width: 3px;
  symbol-fill-opacity: .5;
  z-index: -10;
}

relation[setting(relations)]!:modified.Relation > way.quandarystyle {
  casing-width: 7;
  casing-color: #1396ba; /* Light Blue */
  casing-opacity: 0.55;
  z-index: -10;
}

/* Tracking Selectors -- Way and node style BEFORE they are uploaded */

node:selected::selected_layer {
    symbol-shape: circle;
    symbol-size: 22;
    symbol-stroke-color: #DF2E08; /* Red */
    symbol-stroke-width: 3px;
    symbol-fill-opacity: 0.5;
    z-index: -1;
}

node:modified::modified_layer {
    symbol-shape: circle;
    symbol-size: 22;
    symbol-stroke-color: orange;
    symbol-stroke-width: 3px;
    symbol-fill-opacity: 0.5;
    z-index: -7;
}

way:modified::modified_layer,
node:modified < way::modified_layer {
    width: 7;
    color: transparent;
    opacity: 0;
    casing-width: 7;
    casing-color: #47D608; /* Lime */
    casing-opacity: 0.7;
    z-index: -7;
}

relation[setting(relations)]:modified > node::modified_layer {
  symbol-shape: circle;
  symbol-size: 22;
  symbol-stroke-color: #ba752b; /* Orange */
  symbol-stroke-width: 3px;
  symbol-fill-opacity: .5;
  z-index: -5;
}

relation[setting(relations)]:modified > way::modified_layer {
  width: 7;
  color: transparent;
  opacity: 0;
  casing-width: 7;
  casing-color: #007a60; /* Sea Green */
  casing-opacity: 0.55;
  z-index: -5;
}

/* Paint Style Settings */

settings::settings {
  label: tr("Settings");
}

setting::relations {
  type: boolean;
  label: tr("Relations");
  default: false;
  group: "settings";
 }

setting::node_off {
  type: boolean;
  label: tr("Remove Node Icons");
  default: false;
  group: "settings";
 }

*[setting("node_off")] {
set .icon;
}

node.icon {
icon-image:N/A;
}
